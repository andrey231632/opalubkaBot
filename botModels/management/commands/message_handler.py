import sqlite3
from django.conf import settings
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from .temp_data import *
from .cart import Cart
from .database_handler import *

BOT_TOKEN = settings.BOT_TOKEN
bot = Bot(BOT_TOKEN, parse_mode="HTML", disable_web_page_preview=True)
ct = Cart()


async def changeLanguageMessageButton(message: types.Message):
    lang_code = get_lang_code(message.chat.id)
    new_lang_code = 'uz' if lang_code == 'ru' else 'ru'
    change_lang_code(
        message.chat.id,
        new_lang_code,
    )
    await backMainMenu(message)
    # markup = InlineKeyboardMarkup(row_width = 2)
    # markup.add(z
    #     InlineKeyboardButton(text = 'üá∑üá∫', callback_data = 'ru'),
    #     InlineKeyboardButton(text = 'üá∫üáø', callback_data = 'uz'),
    # ) 
    # text = {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', 'uz': 'Tilni tanlang'}
    # await message.answer(
    #     text = text[lang_code],
    #     reply_markup = markup,
    # )

async def backMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    match user_state[message.chat.id]:
        case 'catalog': await backMainMenu(message)
        case 'sub_catalog': await catalogMessage(message)
        case 'product': await subCatalogMessage(message, last_category[message.chat.id])


async def backMainMenu(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    lang_code = get_lang_code(message.chat.id)
    button_names = {
            'ru': ('–ö–∞—Ç–∞–ª–æ–≥', '–ù–æ–≤–æ—Å—Ç–∏', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫'),
            'uz': ('Katalog', 'Yangiliklar', 'Menejerga murojaat qiling', "Ko'p so'raladigan savollar", "Tilni o'zgartirish"),
        }
    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in button_names[lang_code]])
    
    text = {
        'ru': '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä New Design Technology! 

–° 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –º—ã - –ª–∏–¥–µ—Ä—ã –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 
–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–µ—Å–æ–≤, –æ–ø–∞–ª—É–±–∫–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö. 
–ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
''',    
        'uz': '''Yangi dizayn texnologiyasi dunyosiga xush kelibsiz!

15 yillik tajribamiz bilan biz ishlab chiqarish sohasida yetakchimiz
va iskala, qolip va butlovchi qismlarni yetkazib berish.
Mijozlarimiz xizmatlarimiz va turli xil takliflarimizdan mamnun.
''',
    }

    await bot.send_message(
        chat_id = message.chat.id,
        text = text[lang_code],
        reply_markup = markup,
    )

async def catalogMessage(message: types.Message):
    user_state[message.chat.id] = 'catalog'
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    
    lang_code = get_lang_code(message.chat.id)

    with sqlite3.connect('db.sqlite3') as c:
        global catalog
        catalog = set([i[0] for i in c.execute('SELECT category FROM botModels_products').fetchall()])

    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in catalog])
    cart_button_text = {
        'ru': '–ö–æ—Ä–∑–∏–Ω–∞',
        'uz': 'Savat',
    }
    back_button_text = {
        'ru': '–ù–∞–∑–∞–¥',
        'uz': 'Orqaga',
    }
    markup.add(KeyboardButton(text = f'üõí {cart_button_text[lang_code]}'))
    markup.add(KeyboardButton(text = f'‚óÄÔ∏è {back_button_text[lang_code]}'))

    category_text = {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤', 'uz': 'Mahsulot turini tanlang'}
    
    await bot.send_message( 
        chat_id = message.chat.id,
        text = f'üëÜüèª {category_text[lang_code]}',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def subCatalogMessage(message: types.Message, category):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    
    
    user_state[message.chat.id] = 'sub_catalog'
    last_category[message.chat.id] = category 

    global all_products
    lang_code = get_lang_code(message.chat.id)
    with sqlite3.connect('db.sqlite3') as c:
        products = [i[0] for i in c.execute(f'SELECT name_{lang_code} FROM botModels_products WHERE category = ?', (category,)).fetchall()]
        all_products = [i[0] for i in c.execute(f'SELECT name_{lang_code} FROM botModels_products').fetchall()]
    
    cart_button_text = {
        'ru': '–ö–æ—Ä–∑–∏–Ω–∞',
        'uz': 'Savat',
    }
    main_menu_button_text = {
        'ru': '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'uz': 'Asosiy menyuga',
    }
    back_button_text = {
        'ru': '–ù–∞–∑–∞–¥',
        'uz': 'Orqaga',
    }

    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in products])
    markup.add(KeyboardButton(text = f'üõí {cart_button_text[lang_code]}'))
    markup.add(KeyboardButton(text = f'‚è™ {main_menu_button_text[lang_code]}'), KeyboardButton(text = f'‚óÄÔ∏è {back_button_text[lang_code]}'))
    text = {
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä',
        'uz': 'Mahsulotni tanlang',
    }
    await bot.send_message(
        chat_id = message.chat.id,
        text = f'üëÜüèª {text[lang_code]}',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def productMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    last_product[message.chat.id] = message.text
    # user_state[message.chat.id] = 'product'
    expand_message[message.chat.id] = 1

    global all_products
    global count_products

    lang_code = get_lang_code(message.chat.id)
    with sqlite3.connect('db.sqlite3') as c:
        product = c.execute(f'SELECT * FROM botModels_products WHERE name_{lang_code} = ?', (message.text,)).fetchone()
        
    count_products[message.chat.id] = 1
    count = 1

    add_to_cart_text      = {'ru': "üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", "uz": "üì• Savatga qo'shish"}
    del_from_cart_text    = {'ru': "üì§ –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "uz": "üì§ Savatdan olib tashlang"}
    sertificate_text      = {'ru': "üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "uz": "üìÑ Sertifikat"}
    open_description_text = {'ru': '–û—Ç–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', 'uz': 'Tavsifni ochish'}

    markup = InlineKeyboardMarkup(row_width = 3, resize_keyboard=True)
    markup.add(InlineKeyboardButton(text = open_description_text[lang_code], callback_data = f'description'))

    markup.add(
        InlineKeyboardButton(text = '-', callback_data = f'-:{message.text}'), 
        InlineKeyboardButton(text = f'{count}', callback_data = 'c'),
        InlineKeyboardButton(text = '+', callback_data = f'+:{message.text}')
    )
    markup.add(InlineKeyboardButton(text = add_to_cart_text[lang_code], callback_data = f'add_product:{message.text}'))
    
    products: dict = ct.cart.get(message.chat.id, None)

    if products != None and message.text in products.keys():
        markup.add(InlineKeyboardButton(text = del_from_cart_text[lang_code], callback_data = f'del_product:{message.text}'))
    markup.add(InlineKeyboardButton(text = sertificate_text[lang_code], callback_data = f'certificate:{message.text}'))


    image_path = f'media/{product[3]}'
    name = product[-2] if lang_code == 'ru' else product[-1]
    # description = product[5]
    # price = '' if product[3] == 0 else f'–¶–µ–Ω–∞: {product[3]} —Å—É–º'

    await bot.send_photo(
        chat_id = message.chat.id,
        photo = open(image_path, 'rb'),
        caption = f'''{name}
''',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def aboutCompanyMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    await bot.send_message(
        chat_id = message.chat.id,
        text = '''<b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>

–ö–æ–º–ø–∞–Ω–∏—è ¬´New Design Technology¬ª —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –≤–µ–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Å—Ç–∞–≤–∫–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–µ—Å–æ–≤, –æ–ø–∞–ª—É–±–∫–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.

–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π –Ω–∞–º–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ, –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —è–≤–ª—è—é—Ç—Å—è —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–º —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ–º —Å –Ω–∞–º–∏.

–ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –ø–æ—Å—Ç–∞–≤–∫–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–∂–µ –±–æ–ª–µ–µ 15 –ª–µ—Ç, –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –±—ã–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –¢–∞–∫ –∂–µ, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –≤ —Å—Ñ–µ—Ä–µ –∞—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–¥–∞–∂–∏, —è–≤–ª—è–µ–º—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—ä–µ–º–Ω–∏–∫–æ–≤ –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ.
''',    
    parse_mode = 'html',
    )

async def contactMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    lang_code = get_lang_code(message.chat.id)
    call_manager_text = {
        'ru': '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        'uz': 'Menejerga murojaat qiling',
    } 
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text = call_manager_text[lang_code], url = 'https://t.me/Andrey_Zolin'))
    
    contact_text = {
        'ru': ('–¢–µ–ª–µ—Ñ–æ–Ω', '–ü–æ—á—Ç–∞', '–ê–¥—Ä–µ—Å', '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã'),
        'uz': ('Telefon', 'Pochta', 'Manzil', 'Ish vaqti'),
    }

    addres_text = {
        'ru': '`–≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ - –£–ª—É–≥–±–µ–∫—Å–∫–∏–π —Ä-–Ω, —É–ª. –ú.–Æ—Å—É—Ñ–∞, –¥.45`',
        'uz': '`Toshkent, Mirzo - Ulugbek rayoni, M.Yusuf kochasi, 45 uy`',
    }

    time_work_text = {
        'ru': '–ü–Ω. ‚Äì –ü—Ç.: —Å 9:00 –¥–æ 18:00',
        'uz': 'Dushanba-Juma.: soat 9:00 dan 18:00gacham',
    }

    await bot.send_message(
        chat_id = message.chat.id,
        text = f'''‚òéÔ∏è {contact_text[lang_code][0]}
‚îú  `+998 90 945-15-75`
‚îú  `+998 90 002-24-34`
‚îî  `+998 90 930-38-38`

üìß {contact_text[lang_code][1]}
‚îî   `havoza@mail.ru`

üì´ {contact_text[lang_code][2]}
‚îî   {addres_text[lang_code]}

‚åö {contact_text[lang_code][3]}
‚îî   {time_work_text[lang_code]}
''',
    parse_mode = 'MARKDOWN', 
    reply_markup = markup,
    )


async def cart_menu(message: types.Message): 
    
    lang_code = get_lang_code(message.chat.id)
    userCart: dict = ct.cart.get(message.chat.id, None)
    empty_cart_text = {
        'ru': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
        'uz': 'Arava bo‚Äòsh',
    }
    if userCart is None or userCart == {}: 
        await bot.send_message(
            chat_id = message.chat.id,
            text = f'<b>üõí {empty_cart_text[lang_code]}</b>', 
            parse_mode = 'html',
        )
        return 0
    
    clear_cart_text = {
        'ru': '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
        'uz': "Chiqindini bo'shatish",
    }
    send_order_text = {
        'ru': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
        'uz': 'Buyurtmani menejerga yuboring',
    }

    markup = InlineKeyboardMarkup(row_width = 1)
    markup.add(
        InlineKeyboardButton(text = f'üîÑÔ∏è {clear_cart_text[lang_code]}', callback_data = 'clear_cart'),
        InlineKeyboardButton(text = f'üí† {send_order_text[lang_code]}', callback_data = 'send_order'),
    )
    
    cart_text = {
        'ru': '–ö–æ—Ä–∑–∏–Ω–∞',
        'uz': 'Savat',
    }

    kolovo_text = {'ru': '–ö–æ–ª-–≤–æ', 'uz': 'Soni'}

    orderText = ''.join([f'{i[0]}\n{kolovo_text[lang_code]}: {i[1]}\n\n' for i in userCart.items()])
    orderText = f'<b>üõí {cart_text[lang_code]}:</b>\n\n' + orderText
    await bot.send_message(
            chat_id = message.chat.id,
            text = orderText, 
            parse_mode = 'html',
            reply_markup = markup,
        )


async def messageHandler(message: types.Message):

    match message.text:
        case '–û –∫–æ–º–ø–∞–Ω–∏–∏':
            await aboutCompanyMessage(message)

        case '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
            await contactMessage(message)

        case text if text in ('–ö–∞—Ç–∞–ª–æ–≥', 'Katalog'):
            await catalogMessage(message)
        
        case text if text in ('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'Menejerga murojaat qiling'): 
            await contactMessage(message)
    
        case text if text in ('–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫', "Tilni o'zgartirish"):
            await changeLanguageMessageButton(message)

        case text if text in ('‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚óÄÔ∏è Orqaga'):
            try:
                await backMessage(message)
            except Exception as e:
                print(e)
                pass
        case text if text in ('‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '‚è™ Asosiy menyuga'):
            await backMainMenu(message)

        case text if text in ('üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üõí Savat'):
            await cart_menu(message)

        case text if text in catalog:
            await subCatalogMessage(message, message.text)

        case text if text in all_products:
            await productMessage(message)
        
        # 'ru': ('–ö–∞—Ç–∞–ª–æ–≥', '–ù–æ–≤–æ—Å—Ç–∏', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        # 'uz': ('Katalog', 'Yangiliklar', 'Menejerga murojaat qiling', "Ko'p so'raladigan savollar", 'Sozlamalar'),

        # cart_button_text = {
        # 'ru': '–ö–æ—Ä–∑–∏–Ω–∞',
        # 'uz': 'Savat',
        # }
        # main_menu_button_text = {
        #     'ru': '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        #     'uz': 'Asosiy menyuga',
        # }
        # back_button_text = {
        #     'ru': '–ù–∞–∑–∞–¥',
        #     'uz': 'Orqaga',
        # }