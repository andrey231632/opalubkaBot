import sqlite3
from django.conf import settings
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from .temp_data import *
from .cart import Cart


BOT_TOKEN = settings.BOT_TOKEN
bot = Bot(BOT_TOKEN, parse_mode="HTML", disable_web_page_preview=True)
ct = Cart()

async def backMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    match user_state[message.chat.id]:
        case 'catalog': await backMainMenu(message)
        case 'sub_catalog': await catalogMessage(message)
        case 'product': await subCatalogMessage(message, last_category[message.chat.id])


async def backMainMenu(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    button_names = ['–ö–∞—Ç–∞–ª–æ–≥', '–ù–æ–≤–æ—Å—Ç–∏', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã']
    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in button_names])
    
    await bot.send_message(
        chat_id = message.chat.id,
        text = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä New Design Technology! 

–° 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –º—ã - –ª–∏–¥–µ—Ä—ã –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 
–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–µ—Å–æ–≤, –æ–ø–∞–ª—É–±–∫–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö. 
–ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
''',
        reply_markup = markup,
    )

async def catalogMessage(message: types.Message):
    user_state[message.chat.id] = 'catalog'
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    
    with sqlite3.connect('db.sqlite3') as c:
        global catalog
        catalog = set([i[0] for i in c.execute('SELECT category FROM botModels_products').fetchall()])

    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in catalog])
    markup.add(KeyboardButton(text = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'))
    markup.add(KeyboardButton(text = '‚óÄÔ∏è –ù–∞–∑–∞–¥'))

    await bot.send_message(
        chat_id = message.chat.id,
        text = '''üëÜüèª –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤''',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def subCatalogMessage(message: types.Message, category):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass
    
    
    user_state[message.chat.id] = 'sub_catalog'
    last_category[message.chat.id] = category 

    global all_products
    with sqlite3.connect('db.sqlite3') as c:
        products = [i[0] for i in c.execute('SELECT name FROM botModels_products WHERE category = ?', (category,)).fetchall()]
        all_products = [i[0] for i in c.execute('SELECT name FROM botModels_products').fetchall()]


    markup = ReplyKeyboardMarkup(row_width = 2, resize_keyboard=True)
    markup.add(*[KeyboardButton(text = button_name) for button_name in products])
    markup.add(KeyboardButton(text = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'))
    markup.add(KeyboardButton(text = '‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), KeyboardButton(text = '‚óÄÔ∏è –ù–∞–∑–∞–¥'))

    await bot.send_message(
        chat_id = message.chat.id,
        text = '''üëÜüèª –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä''',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def productMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    last_product[message.chat.id] = message.text
    # user_state[message.chat.id] = 'product'
    expand_message[message.chat.id] = 1

    global all_products
    global count_products
    with sqlite3.connect('db.sqlite3') as c:
        product = c.execute(f'SELECT * FROM botModels_products WHERE name = ?', (message.text,)).fetchone()

    count_products[message.chat.id] = 1
    count = 1

    markup = InlineKeyboardMarkup(row_width = 3, resize_keyboard=True)
    markup.add(InlineKeyboardButton(text = '–û—Ç–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data = f'description'))

    markup.add(
        InlineKeyboardButton(text = '-', callback_data = f'-:{message.text}'), 
        InlineKeyboardButton(text = f'{count}', callback_data = 'c'),
        InlineKeyboardButton(text = '+', callback_data = f'+:{message.text}')
    )
    markup.add(InlineKeyboardButton(text = 'üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data = f'add_product:{message.text}'))
    
    products: dict = ct.cart.get(message.chat.id, None)

    if products != None and message.text in products.keys():
        markup.add(InlineKeyboardButton(text = 'üì• –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', callback_data = f'del_product:{message.text}'))
    markup.add(InlineKeyboardButton(text = 'üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', callback_data = f'certificate:{message.text}'))


    image_path = f'media/{product[4]}'
    name = product[2]
    # description = product[5]
    # price = '' if product[3] == 0 else f'–¶–µ–Ω–∞: {product[3]} —Å—É–º'

    await bot.send_photo(
        chat_id = message.chat.id,
        photo = open(image_path, 'rb'),
        caption = f'''{name}
''',    
        parse_mode = 'html',
        reply_markup = markup,
    )


async def aboutCompanyMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    await bot.send_message(
        chat_id = message.chat.id,
        text = '''<b>–û –∫–æ–º–ø–∞–Ω–∏–∏</b>

–ö–æ–º–ø–∞–Ω–∏—è ¬´New Design Technology¬ª —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –≤–µ–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Å—Ç–∞–≤–∫–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–µ—Å–æ–≤, –æ–ø–∞–ª—É–±–∫–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.

–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π –Ω–∞–º–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ, –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —è–≤–ª—è—é—Ç—Å—è —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–º —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ–º —Å –Ω–∞–º–∏.

–ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –ø–æ—Å—Ç–∞–≤–∫–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–∂–µ –±–æ–ª–µ–µ 15 –ª–µ—Ç, –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –±—ã–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –¢–∞–∫ –∂–µ, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –≤ —Å—Ñ–µ—Ä–µ –∞—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–¥–∞–∂–∏, —è–≤–ª—è–µ–º—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—ä–µ–º–Ω–∏–∫–æ–≤ –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ.
''',    
    parse_mode = 'html',
    )

async def contactMessage(message: types.Message):
    try:
        await bot.delete_message(
            message.chat.id,
            message.message_id
        )
    except:
        pass

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text = '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', url = 'https://t.me/Andrey_Zolin'))
    
    await bot.send_message(
        chat_id = message.chat.id,
        text = '''‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω
‚îú  `+998 90 945-15-75`
‚îú  `+998 90 002-24-34`
‚îî  `+998 90 930-38-38`

üìß –ü–æ—á—Ç–∞
‚îî   `havoza@mail.ru`

üì´ –ê–¥—Ä–µ—Å
‚îî   `–≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ - –£–ª—É–≥–±–µ–∫—Å–∫–∏–π —Ä-–Ω, —É–ª. –ú.–Æ—Å—É—Ñ–∞, –¥.45`

‚åö –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
‚îî   –ü–Ω. ‚Äì –ü—Ç.: —Å 9:00 –¥–æ 18:00
''',
    parse_mode = 'MARKDOWN', 
    reply_markup = markup,
    )


async def cart_menu(message: types.Message): 
    
    userCart: dict = ct.cart.get(message.chat.id, None)
    if userCart is None or userCart == {}: 
        await bot.send_message(
            chat_id = message.chat.id,
            text = '<b>üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>', 
            parse_mode = 'html',
        )
        return 0
    
    markup = InlineKeyboardMarkup(row_width = 2)
    markup.add(
        InlineKeyboardButton(text = 'üîÑÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data = 'clear_cart'),
        InlineKeyboardButton(text = 'üí†–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data = 'send_order'),
    )
    
    orderText = ''.join([f'{i[0]}\n–ö–æ–ª-–≤–æ: {i[1]}\n\n' for i in userCart.items()])
    orderText = '<b>üõí –ö–æ—Ä–∑–∏–Ω–∞:</b>\n\n' + orderText
    await bot.send_message(
            chat_id = message.chat.id,
            text = orderText, 
            parse_mode = 'html',
            reply_markup = markup,
        )
    
# async def catalogMessage(message: types.Message):
#     bot.send_message(
#         chat_id = message.chat.id,
#         text = ''
#     )


async def messageHandler(message: types.Message):

    match message.text:
        case '–û –∫–æ–º–ø–∞–Ω–∏–∏':
            await aboutCompanyMessage(message)

        case '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
            await contactMessage(message)

        case '–ö–∞—Ç–∞–ª–æ–≥':
            await catalogMessage(message)
        
        case '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º': 
            await contactMessage(message)
    
        case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            await backMessage(message)

        case '‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await backMainMenu(message)

        case 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
            await cart_menu(message)

        case text if text in catalog:
            await subCatalogMessage(message, message.text)

        case text if text in all_products:
            await productMessage(message)
        

        